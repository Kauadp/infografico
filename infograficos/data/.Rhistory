rm(list = ls())
library(tidyverse)
dados <- read.csv('bling_export.csv', sep = ";")
table(dados$Fornecedor)
high <- dados |>
filter(Fornecedor == "CIA. HERING.")
View(high)
dados$Data.de.emissão <- str_extract(dados$Data.de.emissão, "[0-9]+/[0-9]+/[0-9]+")
table(dados$Data.de.emissão)
rm(list = ls())
library(tidyverse)
dados <- read.csv('bling_export.csv', sep = ";")
library(jsonlite)
toJSON(dados)
# CARREGANDO AS LIBS NECESSÁRIAS E LENDO OS DADOS
library(tidyverse)
library(jsonlite)
library(dunn.test)
library(MASS)
library(ggplot2)
dados <- read.csv('bling_export.csv', sep = ";")
head(dados)
table(dados$Fornecedor)
dados <- dados |>
mutate(
loja = case_when(
Fornecedor == "-" | Fornecedor == 'HIGH COMPANY LTDA' ~ "High",
Fornecedor == "VCI - VANGUARD CONFECCOES IMPORTADAS S/A" ~ "Aramis",
Fornecedor == "PASQUINI E PASQUINI CONFECCOES LTDA." ~ "Acostamento",
Fornecedor == "ZZAB Comercio de Calcados Ltda. AREZZO" | Fornecedor == "ZZAB Comercio de Calcados Ltda. VANS" ~ "ZZAB Comercio de Calcados Ltda."
)
)
table(dados$loja)
dados <- dados |>
mutate(
loja = case_when(
loja == "ZZAB Comercio de Calcados Ltda." & str_starts(Descrição, "CALCADOS") ~ "Arezzo",
loja == "ZZAB Comercio de Calcados Ltda." & !str_starts(Descrição, "CALCADOS") ~ "Vans",
TRUE ~ loja
)
)
dados <- dados |>
mutate(
data = dmy_hms(Data.de.emissão),
data_emissao = as.Date(data),
hora_emissao = hour(data)
)
dados <- dados |>
mutate(
Quantidade = parse_number(Quantidade, locale = locale(decimal_mark = ",")),
Preço.de.custo = parse_number(Preço.de.custo, locale = locale(decimal_mark = ",")),
Valor.total = parse_number(Valor.total, locale = locale(decimal_mark = ",")),
Valor.unitário = parse_number(Valor.unitário, locale = locale(decimal_mark = ",")),
Valor.total.líquido = parse_number(Valor.total.líquido, locale = locale(decimal_mark = ","))
)
## AJEITANDO O PREÇO DE CUSTO DOS PRODUTOS DA AREZZO
dados <- dados |>
mutate(
Preço.de.custo = case_when(
loja == "Arezzo" ~ 42,
TRUE ~ Preço.de.custo)
)
## ADICIONANDO NOVA VARIÁVEL DE PREÇO DE CUSTO TOTAL
dados <- dados |>
mutate(
custo_total = Quantidade*Preço.de.custo
)
peak_demanda <- as.data.frame.matrix(table(dados$data_emissao, dados$hora_emissao)) |>
rownames_to_column(var = "data_emissao") |>
pivot_longer(
cols = -data_emissao,
names_to = "hora_emissao",
values_to = "contagem"
) |>
mutate(
hora_emissao = as.factor(hora_emissao),
data_emissao = ymd(data_emissao)
)
peak_demanda <- peak_demanda |>
mutate(
hora_emissao = as.factor(hora_emissao),
dia_da_semana = factor(weekdays(data_emissao, abbreviate = TRUE))
)
peak_demanda |>
ggplot(aes(x = hora_emissao, y = dia_da_semana, fill = contagem)) +
geom_tile(color = "white") +
scale_fill_viridis_c() +
labs(
title = "Heatmap de Contagem de Emissões por Hora e Dia da Semana",
x = "Hora da Emissão",
y = "Dia da Semana",
fill = "Contagem"
) +
scale_y_discrete(limits = rev)
summary(glm.nb(contagem ~ dia_da_semana + hora_emissao, data = peak_demanda))
peak_demanda_fat <- dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao)),
hora_emissao = as.factor(hour(data_emissao))
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
valor_medio = mean(Valor.total, na.rm = TRUE),
.groups = 'drop'
)
summary(aov(valor_medio ~ dia_da_semana * hora_emissao, data = dados_faturado_agrupado))
peak_demanda_fat <- dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao)),
hora_emissao = as.factor(hour(data_emissao))
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
valor_medio = mean(Valor.total, na.rm = TRUE),
.groups = 'drop'
)
summary(aov(valor_medio ~ dia_da_semana * hora_emissao, data = peak_demanda_fat))
View(peak_demanda_fat)
peak_demanda_fat <- dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao)),
hora_emissao = as.factor(hora_emissao))
) |>
peak_demanda_fat <- dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao)),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
valor_medio = mean(Valor.total, na.rm = TRUE),
.groups = 'drop'
)
summary(aov(valor_medio ~ dia_da_semana * hora_emissao, data = peak_demanda_fat))
peak_demanda_fat <- dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao)),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
valor_medio = mean(Valor.total, na.rm = TRUE),
.groups = 'drop'
)
peak_demanda_fat <- dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao)),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
valor_medio = mean(Valor.total, na.rm = TRUE),
.groups = 'drop'
)
aov_lm <- aov(valor_medio ~ dia_da_semana * hora_emissao, data = peak_demanda_fat)
aov_lm <- aov(valor_medio ~ dia_da_semana * hora_emissao, data = peak_demanda_fat)
aov_lm
summary(aov_lm)
print(summary(modelo_aov), digits = 4)
print(summary(aov_lm), digits = 4)
print(summary(aov_lm), digits = 7)
View(dados)
aov_lm <- aov(Valor.total ~ dia_da_semana * hora_emissao, data = dados)
aov_lm <- aov(Valor.total ~ data_emissao * hora_emissao, data = dados)
aov_lm <- aov(Valor.total ~ data_emissao * hora_emissao, data = dados)
aov_lm
summary(aov_lm)
dunn_result_contagem <- dunn.test(
x = peak_demanda$contagem,
g = peak_demanda$hora_emissao,
method = "bonferroni"
)
dunn_result_contagem <- dunn.test(
x = peak_demanda$contagem,
g = peak_demanda$hora_emissao,
method = "holm"
)
TukeyHSD(aov_lm, which = "data_emissao")
dados |>
mutate(
data_emissao = as.factor(data_emissao),
data_emissao = as.factor(hora_emissao)
) |>
aov(Valor.total ~ data_emissao * hora_emissao)
peak_demanda_fat <- dados |>
mutate(
data_emissao = as.factor(data_emissao),
data_emissao = as.factor(hora_emissao)
)
aov(Valor.total ~ data_emissao * hora_emissao, data = peak_demanda_fat)
aov_lm <- aov(Valor.total ~ data_emissao * hora_emissao, data = peak_demanda_fat)
summary(aov_lm)
peak_demanda_fat <- dados |>
mutate(
data_emissao = as.factor(data_emissao),
hora_emissao = as.factor(hora_emissao)
)
aov_lm <- aov(Valor.total ~ data_emissao * hora_emissao, data = peak_demanda_fat)
summary(aov_lm)
TukeyHSD(aov_lm, which = "data_emissao")
table(dados$data_emissao, dados$Valor.total)
plot(dados$data_emissao, dados$Valor.total)
dados |>
dados |>
group_by(data_emissao) |>
sum(Valor.total)
dados |>
group_by(data_emissao) |>
sum(Valor.total)
dados |>
group_by(data_emissao) |>
sum(Valor.total)
dados |>
group_by(data_emissao) |>
sum(Valor.total) |>
peak_demanda_fat <- dados |>
mutate(
data_emissao = as.factor(data_emissao),
hora_emissao = as.factor(hora_emissao)
)
dados |>
group_by(data_emissao) |>
summarise(sum(Valor.total))
TukeyHSD(aov_lm, which = "hora_emissao")
library(scales)
dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao, abbreviate = FALSE, locale = "pt_BR"),
levels = c("domingo", "segunda-feira", "terça-feira", "quarta-feira",
"quinta-feira", "sexta-feira", "sábado")),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
receita_bruta = sum(Valor.total, na.rm = TRUE),
.groups = 'drop'
) |>
ggplot(aes(x = hora_emissao, y = dia_da_semana, fill = receita_bruta)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_viridis_c(
name = "Receita Bruta (R$)",
labels = scales::label_number(prefix = "R$") # Formata a legenda como R$
) +
labs(
title = "Heatmap: Receita Bruta por Hora do Dia e Dia da Semana",
x = "Hora da Emissão",
y = "Dia da Semana"
) +
scale_y_discrete(limits = rev) +
theme_minimal()
dados |>
mutate(
dia_da_semana = factor(weekdays(data_emissao, abbreviate = FALSE, locale = "pt_BR"),
levels = c("domingo", "segunda-feira", "terça-feira", "quarta-feira",
"quinta-feira", "sexta-feira", "sábado")),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
receita_bruta = sum(Valor.total, na.rm = TRUE),
.groups = 'drop'
) |>
ggplot(aes(x = hora_emissao, y = dia_da_semana, fill = receita_bruta)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_viridis_c(
name = "Receita Bruta (R$)",
labels = scales::label_number(prefix = "R$") # Formata a legenda como R$
) +
labs(
title = "Heatmap: Receita Bruta por Hora do Dia e Dia da Semana",
x = "Hora da Emissão",
y = "Dia da Semana"
) +
scale_y_discrete(limits = rev) +
theme_minimal()
dados |>
mutate(
dia_da_semana = factor(wday(data_emissao, label = FALSE, abbr = T,locale = "pt_BR"),
levels = c("domingo", "segunda-feira", "terça-feira", "quarta-feira",
"quinta-feira", "sexta-feira", "sábado")),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
receita_bruta = sum(Valor.total, na.rm = TRUE),
.groups = 'drop'
) |>
ggplot(aes(x = hora_emissao, y = dia_da_semana, fill = receita_bruta)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_viridis_c(
name = "Receita Bruta (R$)",
labels = scales::label_number(prefix = "R$") # Formata a legenda como R$
) +
labs(
title = "Heatmap: Receita Bruta por Hora do Dia e Dia da Semana",
x = "Hora da Emissão",
y = "Dia da Semana"
) +
scale_y_discrete(limits = rev) +
theme_minimal()
dados |>
mutate(
dia_da_semana = factor(wday(data_emissao, label = T, abbr = T, locale = "pt_BR"),
levels = c("domingo", "segunda-feira", "terça-feira", "quarta-feira",
"quinta-feira", "sexta-feira", "sábado")),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
receita_bruta = sum(Valor.total, na.rm = TRUE),
.groups = 'drop'
) |>
ggplot(aes(x = hora_emissao, y = dia_da_semana, fill = receita_bruta)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_viridis_c(
name = "Receita Bruta (R$)",
labels = scales::label_number(prefix = "R$") # Formata a legenda como R$
) +
labs(
title = "Heatmap: Receita Bruta por Hora do Dia e Dia da Semana",
x = "Hora da Emissão",
y = "Dia da Semana"
) +
scale_y_discrete(limits = rev) +
theme_minimal()
library(lubridate)
dados |>
mutate(
# CORREÇÃO: Usar wday() do lubridate para obter o nome do dia em português
dia_da_semana = wday(data_emissao, label = TRUE, abbr = FALSE, locale = "pt_BR"),
# Garante que os níveis estão na ordem correta, se o wday() não fizer isso automaticamente
dia_da_semana = factor(dia_da_semana,
levels = c("domingo", "segunda-feira", "terça-feira", "quarta-feira",
"quinta-feira", "sexta-feira", "sábado")),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
receita_bruta = sum(Valor.total, na.rm = TRUE),
.groups = 'drop'
)
dados |>
mutate(
dia_da_semana = wday(data_emissao, label = TRUE, abbr = FALSE),
hora_emissao = as.factor(hora_emissao)
) |>
group_by(dia_da_semana, hora_emissao) |>
summarise(
receita_bruta = sum(Valor.total, na.rm = TRUE),
.groups = 'drop'
) |>
ggplot(aes(x = hora_emissao, y = dia_da_semana, fill = receita_bruta)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_viridis_c(
name = "Receita Bruta (R$)",
labels = scales::label_number(prefix = "R$")
) +
labs(
title = "Heatmap: Receita Bruta por Hora do Dia e Dia da Semana",
x = "Hora da Emissão",
y = "Dia da Semana"
) +
scale_y_discrete(limits = rev) + # Mantém a inversão para que a leitura seja de cima para baixo
theme_minimal()
dados_diarios <- dados |>
group_by(data_emissao) |>
summarise(
Faturamento_R = sum(Valor.total, na.rm = TRUE),
Quantidade_Vendas = n(), #
.groups = 'drop'
)
fator_escala <- max(dados_diarios$Faturamento_R) / max(dados_diarios$Quantidade_Vendas)
ggplot(dados_diarios, aes(x = data_emissao)) +
geom_area(aes(y = Faturamento_R), fill = "#f5c5d0", alpha = 0.8) +
geom_line(aes(y = Faturamento_R), color = "#e64a6e", linewidth = 1) +
geom_point(aes(y = Faturamento_R), color = "#e64a6e", size = 3) +
geom_area(aes(y = Quantidade_Vendas * fator_escala), fill = "#b3ecec", alpha = 0.8) +
geom_line(aes(y = Quantidade_Vendas * fator_escala), color = "#00c49f", linewidth = 1) +
geom_point(aes(y = Quantidade_Vendas * fator_escala), color = "#00c49f", size = 3) +
scale_y_continuous(
name = "Faturamento (R$)",
labels = scales::label_number(prefix = "R$ "),
sec.axis = sec_axis(~ . / fator_escala, name = "Quantidade", labels = scales::comma)
) +
scale_x_date(date_breaks = "1 day", date_labels = "%d/%m/%Y") +
labs(
title = "Vendas por Dia",
x = NULL
) +
theme_classic() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title.y.left = element_text(color = "#e64a6e"),
axis.title.y.right = element_text(color = "#00c49f"),
legend.position = "none"
)
library(ggthemes)
ggplot(dados_diarios, aes(x = data_emissao)) +
geom_area(aes(y = Faturamento_R), fill = "#f5c5d0", alpha = 0.8) +
geom_line(aes(y = Faturamento_R), color = "#e64a6e", linewidth = 1) +
geom_point(aes(y = Faturamento_R), color = "#e64a6e", size = 3) +
geom_area(aes(y = Quantidade_Vendas * fator_escala), fill = "#b3ecec", alpha = 0.8) +
geom_line(aes(y = Quantidade_Vendas * fator_escala), color = "#00c49f", linewidth = 1) +
geom_point(aes(y = Quantidade_Vendas * fator_escala), color = "#00c49f", size = 3) +
scale_y_continuous(
name = "Faturamento (R$)",
labels = scales::label_number(prefix = "R$ "),
sec.axis = sec_axis(~ . / fator_escala, name = "Quantidade", labels = scales::comma)
) +
scale_x_date(date_breaks = "1 day", date_labels = "%d/%m/%Y") +
labs(
title = "Vendas por Dia",
x = NULL
) +
theme_fivethirtyeight() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title.y.left = element_text(color = "#e64a6e"),
axis.title.y.right = element_text(color = "#00c49f"),
legend.position = "none"
)
